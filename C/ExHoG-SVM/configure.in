dnl Author: Navneet Dalal <navneet.dalal@inrialpes.fr>
dnl Most of the code of this file is based on blitz configure.in code


AC_PREREQ(2.53)
AC_INIT(
        [INRIA computer vision, image classification, object detection library],
        [0.1],
        [Navneet Dalal (mailto:navneet.dalal@inrialpes.fr)],
        [Lear at inrialpes ])
AM_CONFIG_HEADER(config.h)
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE

dnl Avoid generating makefile rules to rebuild maintainer-only files by
dnl default.  Maintainers may override this default and generate these
dnl makefile rules using the `--enable-maintainer-mode' configure option.
AM_MAINTAINER_MODE

dnl CV, IP library configure utility, generated by autoconf.
dnl If you want to modify this file, make sure you are editing
dnl configure.ac, and not configure.  

AC_MSG_NOTICE([
Configuring $PACKAGE_STRING for $target
])

AC_LANG(C++)
AC_PROG_CXX([g++ icc ]) #icpc xlc++ xlC cxx aCC CC pgCC
AC_CXX_FLAGS_PRESET

dnl  shared library building
AM_DISABLE_SHARED

dnl Libtool stuff check
AC_PROG_LIBTOOL

dnl check for math library
dnl AC_CHECK_LIB([m, pow, AC_MSG_NOTICE(found libm), AC_MSG_ERROR(libm is required)])


BOOST_REQUIRE([1.35])
BOOST_TOKENIZER
BOOST_DATE_TIME([s]) 
BOOST_FILESYSTEM([s]) 
BOOST_PROGRAM_OPTIONS([s])

AC_CXX_LIB_BLITZ(["required"])

AM_PATH_IMLIB2

SHELL=${CONFIG_SHELL-/bin/sh}
AC_SUBST(SHELL)

dnl Declare variables which we want substituted in the Makefile.in's

dnl{{{ library variables
dnl {{{  ImLib2 library code
AC_SUBST(IMLIB2_INC)
AC_SUBST(IMLIB2_LIB)
AC_SUBST(IMLIB2_LIB_DIR)

IMLIB2_INC="$IMLIB2_CFLAGS"
IMLIB2_LIB="$IMLIB2_LIBS"
IMLIB2_LIB_DIR=

echo "    IMLIB2_INC       = $IMLIB2_CPPFLAGS"
echo "    IMLIB2_LIBS      = $IMLIB2_LIBS"
dnl }}}
dnl {{{  Image library code
AC_SUBST(IMG_INC)
AC_SUBST(IMG_LIB)
AC_SUBST(IMG_LIB_DIR)

IMG_INC="$IMLIB2_INC"
IMG_LIB="$IMLIB2_LIB"
IMG_LIB_DIR="$IMLIB2_LIB_DIR"
dnl }}}
dnl {{{ Blitz++ Library
AC_SUBST(BLITZ_INC)
AC_SUBST(BLITZ_LIB)
AC_SUBST(BLITZ_LIB_DIR)

BLITZ_INC="$BLITZ_CPPFLAGS"
BLITZ_LIB="$BLITZ_LIBS"
BLITZ_LIB_DIR="$BLITZ_LDFLAGS"
dnl }}}
dnl {{{  BOOST C++ library
AC_SUBST(BOOST_INC)
AC_SUBST(BOOST_LIB)
AC_SUBST(BOOST_LIB_DIR)

BOOST_INC="$BOOST_CPPFLAGS"
BOOST_LIB="$BOOST_DATE_TIME_LIBS $BOOST_FILESYSTEM_LIBS $BOOST_PROGRAM_OPTIONS_LIBS"
BOOST_LIB_DIR="$BOOST_DATE_TIME_LDFLAGS $BOOST_FILESYSTEM_LDFLAGS $BOOST_PROGRAM_OPTIONS_LDFLAGS"
dnl }}}
dnl {{{  this library code
AC_SUBST(MYLIB_INC)
AC_SUBST(MYLIB_LIB)
AC_SUBST(MYLIB_LIB_DIR)

MYLIB_INC="-I\$(top_srcdir)"
MYLIB_LIB="-L\$(top_builddir)/lib -lcmdline -lcvip -L\$(top_builddir)/lib/classifier -lclassifier -llearutil "
MYLIB_LIB_DIR=""
dnl }}}
dnl {{{  Compiler include, lib flags
AC_SUBST(REQ_INC)
AC_SUBST(REQ_LIB)
AC_SUBST(REQ_LIB_DIR)

REQ_INC="$BLITZ_INC \
        $BOOST_INC \
        $MYLIB_INC"
REQ_LIB="$MYLIB_LIB $BLITZ_LIB $BOOST_LIB" 
REQ_LIB_DIR="$MYLIB_LIB_DIR $BLITZ_LIB_DIR $BOOST_LIB_DIR"

AC_SUBST(ALL_INC)
AC_SUBST(ALL_LIB)
AC_SUBST(ALL_LIB_DIR)

ALL_INC="$REQ_INC \
        $IMG_INC"
ALL_LIB="$REQ_LIB $IMG_LIB"
ALL_LIB_DIR="$REQ_LIB_DIR $IMG_LIB_DIR"
dnl }}}
dnl{{{ check optimization options
dnl Check if the script was called with 
dnl --enable-debug, and if so modify the compilation flags.
AC_ARG_ENABLE(debug,
  [  --enable-debug          build debug version 
                               (unoptimized -- use ONLY for debug)],
  [if test "$enableval" = yes; then
     echo "Debug flags enabled"
     CXXFLAGS="$CXX_DEBUG_FLAGS $USE_SSE_FLAG $CXXFLAGS"
     CFLAGS="$C_DEBUG_FLAGS $CFLAGS $USE_SSE_FLAG "
   fi], 
  [CXXFLAGS="$CXX_OPTIMIZE_FLAGS $USE_SSE_FLAG $CXXFLAGS"
   CFLAGS="$C_OPTIMIZE_FLAGS $CFLAGS $USE_SSE_FLAG"
   ]) 

dnl Check if the script was called with 
dnl --enable-bzdebug, and if so modify the compilation flags.
AC_ARG_ENABLE(bzdebug,
  [  --enable-bzdebug        build blitz debug version
                               (unoptimized -- use ONLY for debug)],
  [if test "$enableval" = yes; then
     echo "BLITZ++ Debug flags enabled"
     CXXFLAGS="-DBZ_DEBUG $CXXFLAGS"
     CFLAGS="-DBZ_DEBUG $CFLAGS"
   fi], []) 

dnl --enable-profile, and if so modify the compilation flags.
AC_ARG_ENABLE(profile,
  [  --enable-profile        build exes with profiling option],
  [if test "$enableval" = yes; then
     echo "Enabling profiling commands"
     CXXFLAGS="-pg --fprofile-generate "
     CFLAGS="-pg --fprofile-generate "
   fi], []) 
dnl}}}

LDFLAGS="$SPECIAL_LDFALGS $LDFLAGS"

dnl If using makefile, always keep cmdline support
CPPFLAGS="$CPPFLAGS -D__RELEASE__"

dnl{{{  Process the Makefile.in's

AC_LANG([C++])
AC_PROG_CC
AC_PROG_CXX

dnl AC_PROG_RANLIB # libtool makes it redudant 
AC_PROG_INSTALL
AC_PROG_MAKE_SET

AC_CONFIG_FILES([
	Makefile 
	m4/Makefile
	lear/Makefile
	lear/io/Makefile 
	lear/util/Makefile 
	lear/blitz/Makefile 
	lear/blitz/ext/Makefile 
	lear/numericutil/Makefile 
	lear/image/Makefile 
	lear/cvision/Makefile 
	lear/classifier/Makefile 
	lear/interface/Makefile 
	lib/Makefile 
	lib/classifier/Makefile 
        app/Makefile
	])
AC_OUTPUT
dnl}}}

dnl{{{ end comments
echo ""
echo "LIB_HOME           = $LIB_HOME" 
echo "CC                 = $CC"
echo "CFLAGS             = $CFLAGS"
echo "CXX                = $CXX"
echo "CXXFLAGS           = $CXXFLAGS"
echo "CPPFLAGS           = $CPPFLAGS"
echo "LDFLAGS            = $LDFLAGS"
echo ""

cat << 'EOH'
============================================================================
The configure script has generated makefiles for your platform.
You have several options now:

make               Check the compiler and create required libraries 
                     and all programs
make install       Install libraries and programs

EOH
dnl}}}
